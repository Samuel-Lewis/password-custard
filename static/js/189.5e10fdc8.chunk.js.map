{"version":3,"file":"static/js/189.5e10fdc8.chunk.js","mappings":"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","sources":["generator/resources/symbols.ts","generator/utils.ts","generator/transformers/entropy.ts","generator/transformers/delimiters.ts","generator/resources/leet.ts","generator/transformers/number.ts","generator/transformers/upperCase.ts","generator/transformers/words.ts","generator/generator.ts","generator/transformers/leet.ts","generator/transformers/titleCase.ts"],"sourcesContent":["// As defined by OWASP https://owasp.org/www-community/password-special-characters\nexport const symbols = ` !\"#$%&'()*+,-./:;<=>?@[\\\\]^_\\`{|}~`.split('');\nexport const alphaLower = `abcdefghijklmnopqrstuvwxyz`.split('');\nexport const alphaUpper = alphaLower.map(a => a.toUpperCase());\nexport const digits = `0123456789`.split('');\nexport const allCharacters = [...symbols, ...alphaLower, ...alphaUpper, ...digits];\n","export const shuffleArray = <T>(array: T[]): T[] => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nexport const getTokenIndicies = (tokens: string[]) => {\n  return tokens.flatMap((token, tokenIndex) =>\n    token\n      .split(\"\")\n      .map((char, stringIndex) => ({ tokenIndex, stringIndex, char }))\n  );\n};\n","import SecureRNG from \"secure-rng\";\nimport { Transformer } from \"../../types\";\nimport { allCharacters } from \"../resources/symbols\";\nimport { getTokenIndicies, shuffleArray } from \"../utils\";\n\nexport const entropy = (percent: number): Transformer => (tokens) => {\n  const shuffleIndices = shuffleArray(getTokenIndicies(tokens));\n  const selectEntropy = shuffleIndices.slice(\n    0,\n    Math.round((percent / 100) * shuffleIndices.length)\n  );\n\n  selectEntropy.forEach(({ tokenIndex, stringIndex }) => {\n    const token = tokens[tokenIndex];\n    const replacement = SecureRNG.GenerateString(1, allCharacters.join(\"\"));\n    tokens[tokenIndex] =\n      token.substr(0, stringIndex) +\n      replacement +\n      token.substr(stringIndex + replacement.length);\n  });\n\n  return tokens;\n};\n","import { Transformer } from \"../../types\";\n\nexport const delimiters = (delimiters: string[]): Transformer => (tokens) => {\n  if (delimiters.length === 0) {\n    return tokens;\n  }\n\n  return tokens.flatMap((value, index, array) => {\n    if (index === array.length - 1) {\n      return value;\n    }\n\n    const delimiter = delimiters[Math.floor(Math.random() * delimiters.length)];\n    return [value, delimiter];\n  });\n};\n","export const leetSubstitutes:  { [key: string]: string[]; } = {\n  a: [\"4\", \"@\", \"^\"],\n  b: [\"8\", \"6\"],\n  c: [\"(\", \"<\", \"{\"],\n  d: [],\n  e: [\"3\", \"&\"],\n  f: [\"}\"],\n  g: [\"6\", \"9\", \"&\"],\n  h: [\"#\"],\n  i: [\"!\", \"1\", \"|\"],\n  j: [\"]\"],\n  k: [\"X\"],\n  l: [\"1\", \"7\", \"|\"],\n  m: [],\n  n: [],\n  o: [\"0\"],\n  p: [\"9\"],\n  q: [\"9\"],\n  r: [\"2\"],\n  s: [\"5\", \"$\", \"z\"],\n  t: [\"7\", \"+\", \"1\"],\n  u: [],\n  v: [],\n  w: [],\n  x: [\"*\", \"%\"],\n  y: [],\n  z: [\"2\", \"%\", \"3\"],\n};\n","import SecureRNG from \"secure-rng\";\nimport { Transformer } from \"../../types\";\n\nexport const number = (count: number): Transformer => (tokens) => {\n  const numbers = new Array<number>(count)\n    .fill(0)\n    .map((_) => SecureRNG.GenerateInteger(0, 9999));\n\n  numbers.forEach((n) => {\n    const index = SecureRNG.GenerateInteger(0, tokens.length);\n    tokens.splice(index, 0, n.toString().padStart(4, \"0\"));\n  });\n\n  return tokens;\n};\n","import { Transformer } from \"../../types\";\nimport { shuffleArray } from \"../utils\";\n\nexport const upperCase = (count: number): Transformer => (tokens) => {\n  const tokenIndices = shuffleArray(tokens.map((_, i) => i)).slice(0, count);\n  tokenIndices.forEach((i) => (tokens[i] = tokens[i].toUpperCase()));\n  return tokens;\n};\n","import { rword } from \"rword\";\nimport { Transformer } from \"../../types\";\n\nexport const wordAppender = (count: number): Transformer => (tokens) => {\n  if (count === 0) {\n    return [];\n  }\n\n  let words = rword.generate(count, { length: \"3-6\" });\n  if (!Array.isArray(words)) {\n    words = [words];\n  }\n\n  return tokens.concat(words);\n};\n","import { PasswordOptions, Transformer } from \"../types\";\nimport { entropy } from \"./transformers/entropy\";\nimport { delimiters } from \"./transformers/delimiters\";\nimport { leet } from \"./transformers/leet\";\nimport { number } from \"./transformers/number\";\nimport { titleCase } from \"./transformers/titleCase\";\nimport { upperCase } from \"./transformers/upperCase\";\nimport { wordAppender } from \"./transformers/words\";\n\nexport const generatePassword = (options: PasswordOptions): string => {\n  let transformers: Transformer[] = [\n    wordAppender(options.words),\n    leet(options.leet),\n    titleCase(options.titleCase),\n    upperCase(options.upperCase),\n    number(options.numbers),\n    delimiters(options.delimiters),\n    entropy(options.entropy),\n  ];\n\n  let tokens: string[] = [];\n  transformers.forEach((t, i) => {\n    tokens = t(tokens);\n  });\n\n  return tokens.join(\"\");\n};\n","import SecureRNG from \"secure-rng\";\nimport { Transformer } from \"../../types\";\nimport { leetSubstitutes } from \"../resources/leet\";\nimport { getTokenIndicies, shuffleArray } from \"../utils\";\n\nexport const leet = (percent: number): Transformer => (tokens) => {\n  const shuffleIndices = shuffleArray(getTokenIndicies(tokens)).filter(\n    ({ char }) => leetSubstitutes[char].length > 0\n  );\n\n  const selectEntropy = shuffleIndices.slice(\n    0,\n    Math.round((percent / 100) * shuffleIndices.length)\n  );\n\n  selectEntropy.forEach(({ tokenIndex, stringIndex, char }) => {\n    const token = tokens[tokenIndex];\n    const replacement = SecureRNG.GenerateString(\n      1,\n      leetSubstitutes[char].join(\"\")\n    );\n\n    tokens[tokenIndex] =\n      token.substr(0, stringIndex) +\n      replacement +\n      token.substr(stringIndex + replacement.length);\n  });\n\n  return tokens;\n};\n","import { Transformer } from \"../../types\";\n\nexport const titleCase = (include: boolean): Transformer => (tokens) => {\n  if (!include) {\n    return tokens;\n  }\n  return tokens.map((token: string) =>\n    token.replace(\n      /\\w\\S*/g,\n      (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n    )\n  );\n};\n"],"names":["symbols","split","alphaLower","alphaUpper","map","a","toUpperCase","digits","allCharacters","shuffleArray","array","i","length","j","Math","floor","random","getTokenIndicies","tokens","flatMap","token","tokenIndex","char","stringIndex","entropy","percent","shuffleIndices","slice","round","forEach","_ref","replacement","SecureRNG","GenerateString","join","substr","delimiters","value","index","leetSubstitutes","b","c","d","e","f","g","h","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","number","count","Array","fill","_","GenerateInteger","splice","toString","padStart","upperCase","generatePassword","options","transformers","words","rword","generate","isArray","concat","leet","filter","_ref2","include","titleCase","replace","txt","charAt","toLowerCase","numbers"],"sourceRoot":""}